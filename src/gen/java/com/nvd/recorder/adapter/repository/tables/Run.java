/*
 * This file is generated by jOOQ.
 */
package com.nvd.recorder.adapter.repository.tables;


import com.nvd.recorder.adapter.repository.Keys;
import com.nvd.recorder.adapter.repository.Runners;
import com.nvd.recorder.adapter.repository.tables.records.RunRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Run extends TableImpl<RunRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>runners.run</code>
     */
    public static final Run RUN = new Run();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RunRecord> getRecordType() {
        return RunRecord.class;
    }

    /**
     * The column <code>runners.run.id</code>.
     */
    public final TableField<RunRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>runners.run.title</code>.
     */
    public final TableField<RunRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>runners.run.started_on</code>.
     */
    public final TableField<RunRecord, LocalDateTime> STARTED_ON = createField(DSL.name("started_on"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>runners.run.completed_on</code>.
     */
    public final TableField<RunRecord, LocalDateTime> COMPLETED_ON = createField(DSL.name("completed_on"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>runners.run.miles</code>.
     */
    public final TableField<RunRecord, Integer> MILES = createField(DSL.name("miles"), SQLDataType.INTEGER, this, "");

    private Run(Name alias, Table<RunRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Run(Name alias, Table<RunRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>runners.run</code> table reference
     */
    public Run(String alias) {
        this(DSL.name(alias), RUN);
    }

    /**
     * Create an aliased <code>runners.run</code> table reference
     */
    public Run(Name alias) {
        this(alias, RUN);
    }

    /**
     * Create a <code>runners.run</code> table reference
     */
    public Run() {
        this(DSL.name("run"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Runners.RUNNERS;
    }

    @Override
    public UniqueKey<RunRecord> getPrimaryKey() {
        return Keys.KEY_RUN_PRIMARY;
    }

    @Override
    public List<Check<RunRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("run_chk_1"), "(`miles` > 0)", true)
        );
    }

    @Override
    public Run as(String alias) {
        return new Run(DSL.name(alias), this);
    }

    @Override
    public Run as(Name alias) {
        return new Run(alias, this);
    }

    @Override
    public Run as(Table<?> alias) {
        return new Run(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Run rename(String name) {
        return new Run(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Run rename(Name name) {
        return new Run(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Run rename(Table<?> name) {
        return new Run(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Run where(Condition condition) {
        return new Run(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Run where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Run where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Run where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Run where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Run where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Run where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Run where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Run whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Run whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
