/*
 * This file is generated by jOOQ.
 */
package com.nvd.recorder.adapter.repository.tables.records;


import com.nvd.recorder.adapter.repository.tables.Run;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RunRecord extends UpdatableRecordImpl<RunRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>runners.run.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>runners.run.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>runners.run.title</code>.
     */
    public void setTitle(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>runners.run.title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>runners.run.started_on</code>.
     */
    public void setStartedOn(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>runners.run.started_on</code>.
     */
    public LocalDateTime getStartedOn() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>runners.run.completed_on</code>.
     */
    public void setCompletedOn(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>runners.run.completed_on</code>.
     */
    public LocalDateTime getCompletedOn() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>runners.run.miles</code>.
     */
    public void setMiles(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>runners.run.miles</code>.
     */
    public Integer getMiles() {
        return (Integer) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RunRecord
     */
    public RunRecord() {
        super(Run.RUN);
    }

    /**
     * Create a detached, initialised RunRecord
     */
    public RunRecord(Long id, String title, LocalDateTime startedOn, LocalDateTime completedOn, Integer miles) {
        super(Run.RUN);

        setId(id);
        setTitle(title);
        setStartedOn(startedOn);
        setCompletedOn(completedOn);
        setMiles(miles);
        resetChangedOnNotNull();
    }
}
